name: God Mode AI Controller

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      intensity:
        description: 'God Mode Intensity Level'
        required: false
        default: 'balanced'
        type: choice
        options:
          - conservative
          - balanced
          - aggressive
          - experimental

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  god-mode:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hour max runtime
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure Git
        run: |
          git config --global user.name "God Mode AI"
          git config --global user.email "god-mode@ai.system"
      
      - name: Set environment variables
        run: |
          echo "CLAUDE_PAT=${{ secrets.CLAUDE_PAT }}" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> $GITHUB_ENV
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> $GITHUB_ENV
      
      - name: Run God Mode Controller
        run: |
          cd scripts
          cat > run_god_mode.py << 'EOF'
          import asyncio
          import json
          from ai_brain import AIBrain
          from dynamic_god_mode_controller import DynamicGodModeController
          from god_mode_controller import GodModeConfig, IntensityLevel
          
          async def run_god_mode():
              # Get intensity from input or default
              intensity_str = '${{ github.event.inputs.intensity }}' or 'balanced'
              intensity = IntensityLevel(intensity_str)
              
              print(f'Starting Dynamic God Mode Controller (Intensity: {intensity.value})')
              
              # Initialize AI Brain
              print('Initializing AI Brain...')
              ai_brain = AIBrain()
              print('âœ“ AI Brain ready')
              
              # Create configuration
              config = GodModeConfig(
                  intensity=intensity,
                  enable_self_modification=True,
                  enable_multi_repo=True,
                  enable_predictive=True,
                  enable_quantum=True,
                  safety_threshold=0.8 if intensity != IntensityLevel.EXPERIMENTAL else 0.6
              )
              
              # Initialize dynamic controller with AI brain
              controller = DynamicGodModeController(config, ai_brain)
              
              try:
                  # Run one cycle
                  results = await controller.run_god_mode_cycle()
                  
                  # Save results
                  with open('../god_mode_results.json', 'w') as f:
                      json.dump(results, f, indent=2)
                  
                  print(f'\nCycle completed successfully!')
                  print(f'Operations: {len(results["operations"])}')
                  print(f'Errors: {len(results["errors"])}')
                  print(f'Tasks generated: {results.get("tasks_generated", 0)}')
                  print(f'Tasks validated: {results.get("tasks_validated", 0)}')
                  
                  # Show metrics
                  print('\nMetrics:')
                  for metric, value in results['metrics'].items():
                      print(f'  {metric}: {value}')
                  
                  # Show learnings
                  if results.get('learnings'):
                      print('\nLearnings:')
                      for learning in results['learnings'][:5]:
                          print(f'  - {learning.get("type", "unknown")}: {learning.get("impact", "N/A")}')
                  
              except Exception as e:
                  print(f'Error during Dynamic God Mode execution: {e}')
                  await controller.emergency_shutdown()
                  raise
              
              return results
          
          # Run the god mode cycle
          asyncio.run(run_god_mode())
          EOF
          python run_god_mode.py
      
      - name: Check for self-improvements
        id: check_improvements
        run: |
          if [ -d ".self_improver" ]; then
            echo "has_improvements=true" >> $GITHUB_OUTPUT
          else
            echo "has_improvements=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit improvements
        if: steps.check_improvements.outputs.has_improvements == 'true'
        run: |
          git add -A
          git diff --staged --quiet || git commit -m "ðŸ¤– God Mode AI Improvements
          
          This commit contains automated improvements generated by the God Mode AI system.
          Intensity: ${{ github.event.inputs.intensity || 'balanced' }}
          
          Generated with God Mode AI Controller"
          
          git push || echo "No changes to push"
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: god-mode-results-${{ github.run_id }}
          path: |
            god_mode_results.json
            god_mode.log
            .self_improver/
          retention-days: 30
      
      - name: Create summary report
        if: always()
        run: |
          if [ -f "god_mode_results.json" ]; then
            python3 -c "
          import json
          
          with open('god_mode_results.json', 'r') as f:
              results = json.load(f)
          
          print('## God Mode AI Execution Summary')
          print()
          print(f'**Timestamp**: {results.get(\"timestamp\", \"N/A\")}')
          print(f'**Intensity**: {results.get(\"intensity\", \"N/A\")}')
          print(f'**Duration**: {results.get(\"duration\", 0):.2f} seconds')
          print()
          
          # Operations summary
          operations = results.get('operations', [])
          successful = sum(1 for op in operations if op.get('status') == 'completed')
          print(f'### Operations')
          print(f'- Total: {len(operations)}')
          print(f'- Successful: {successful}')
          print(f'- Failed: {len(operations) - successful}')
          print()
          
          # Metrics
          metrics = results.get('metrics', {})
          if metrics:
              print('### Performance Metrics')
              for metric, value in metrics.items():
                  print(f'- {metric}: {value}')
              print()
          
          # Learnings
          learnings = results.get('learnings', [])
          if learnings:
              print('### Key Learnings')
              for learning in learnings[:5]:
                  print(f'- {learning.get(\"type\", \"unknown\")}: {learning.get(\"recommendation\", \"N/A\")}')
              print()
          
          # Errors
          errors = results.get('errors', [])
          if errors:
              print('### Errors')
              for error in errors[:3]:
                  print(f'- {error}')
          " >> $GITHUB_STEP_SUMMARY
          else
            echo "## God Mode AI Execution" >> $GITHUB_STEP_SUMMARY
            echo "No results file found. The execution may have failed." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Create issue for critical findings
        if: success()
        run: |
          python3 -c "
          import json
          import os
          from github import Github
          
          # Check if we have results and GitHub token
          if not os.path.exists('god_mode_results.json'):
              print('No results file found')
              exit(0)
          
          github_token = os.getenv('GITHUB_TOKEN', '${{ secrets.GITHUB_TOKEN }}')
          if not github_token:
              print('No GitHub token available')
              exit(0)
          
          with open('god_mode_results.json', 'r') as f:
              results = json.load(f)
          
          # Check for critical learnings or errors
          errors = results.get('errors', [])
          learnings = results.get('learnings', [])
          
          critical_items = []
          
          # Add critical errors
          for error in errors:
              critical_items.append(f'Error: {error}')
          
          # Add important learnings
          for learning in learnings:
              if learning.get('type') == 'success_rate' and learning.get('rate', 1) < 0.5:
                  critical_items.append(f'Low success rate for {learning.get(\"task_type\", \"unknown\")}: {learning.get(\"rate\", 0):.2%}')
          
          if critical_items:
              # Create issue
              g = Github(github_token)
              repo = g.get_repo('${{ github.repository }}')
              
              issue_body = f'''The God Mode AI Controller has identified the following critical items that need attention:
          
          {chr(10).join(f'- {item}' for item in critical_items[:10])}
          
          **Execution Details:**
          - Timestamp: {results.get('timestamp', 'N/A')}
          - Intensity: {results.get('intensity', 'N/A')}
          - Duration: {results.get('duration', 0):.2f} seconds
          
          This issue was automatically created by the God Mode AI system.
          '''
              
              issue = repo.create_issue(
                  title=f'ðŸš¨ God Mode AI: Critical Findings ({len(critical_items)} items)',
                  body=issue_body,
                  labels=['god-mode', 'automated', 'critical']
              )
              
              print(f'Created issue #{issue.number}')
          else:
              print('No critical items found')
          "
  
  # Optional: Run on push to test changes
  test-god-mode:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test God Mode Controller
        run: |
          cd scripts
          cat > test_god_mode.py << 'EOF'
          from ai_brain import AIBrain
          from dynamic_god_mode_controller import DynamicGodModeController
          from god_mode_controller import GodModeConfig, IntensityLevel
          
          # Quick test to ensure everything loads
          print('Testing Dynamic God Mode Controller...')
          
          # Initialize AI Brain
          ai_brain = AIBrain()
          
          # Create config
          config = GodModeConfig(intensity=IntensityLevel.CONSERVATIVE)
          
          # Initialize dynamic controller
          controller = DynamicGodModeController(config, ai_brain)
          status = controller.get_status()
          
          print('Dynamic God Mode Controller Status:')
          print(f'  Active: {status["active"]}')
          print(f'  Intensity: {status["intensity"]}')
          print('  Core Systems:', status['systems_status'])
          print('  Dynamic Systems:', list(status.get('dynamic_systems', {}).keys()))
          print('\nTest passed!')
          EOF
          python test_god_mode.py