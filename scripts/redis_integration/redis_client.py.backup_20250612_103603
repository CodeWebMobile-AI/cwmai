"""
Redis Client with Advanced Connection Management

Enterprise-grade Redis client with connection pooling, failover, health monitoring,
and automatic reconnection. Supports standalone, cluster, and sentinel deployments.
"""

import asyncio
import logging
import time
import uuid
from typing import Optional, Dict, Any, List, Union, Callable, Tuple
from contextlib import asynccontextmanager
import redis.asyncio as redis
from redis.asyncio.cluster import RedisCluster
from redis.asyncio.sentinel import Sentinel
from redis.exceptions import ConnectionError, TimeoutError, RedisError
from scripts.redis_integration.redis_config import RedisConfig, RedisMode, get_redis_config


class RedisConnectionError(Exception):
    """Redis connection related errors."""
    pass


class RedisCircuitBreakerError(Exception):
    """Circuit breaker is open."""
    pass


class CircuitBreaker:
    """Circuit breaker for Redis operations."""
    
    def __init__(self, failure_threshold: int = 5, timeout: float = 60.0):
        """Initialize circuit breaker.
        
        Args:
            failure_threshold: Number of failures before opening circuit
            timeout: Time to wait before attempting to close circuit
        """
        self.failure_threshold = failure_threshold
        self.timeout = timeout
        self.failure_count = 0
        self.last_failure_time = 0
        self.state = 'closed'  # closed, open, half-open
        self.logger = logging.getLogger(__name__)
    
    def call(self, func: Callable, *args, **kwargs):
        """Execute function with circuit breaker protection."""
        if self.state == 'open':
            if time.time() - self.last_failure_time < self.timeout:
                raise RedisCircuitBreakerError("Circuit breaker is open")
            else:
                self.state = 'half-open'
        
        try:
            result = func(*args, **kwargs)
            if self.state == 'half-open':
                self.state = 'closed'
                self.failure_count = 0
                self.logger.info("Circuit breaker closed - connection restored")
            return result
        except Exception as e:
            self.failure_count += 1
            self.last_failure_time = time.time()
            
            if self.failure_count >= self.failure_threshold:
                self.state = 'open'
                self.logger.error(f"Circuit breaker opened after {self.failure_count} failures")
            
            raise e


class RedisHealthMonitor:
    """Redis connection health monitoring."""
    
    def __init__(self, redis_client, check_interval: float = 30.0):
        """Initialize health monitor.
        
        Args:
            redis_client: Redis client instance
            check_interval: Health check interval in seconds
        """
        self.redis_client = redis_client
        self.check_interval = check_interval
        self.is_healthy = True
        self.last_check = 0
        self.check_count = 0
        self.failure_count = 0
        self.logger = logging.getLogger(__name__)
        self._monitor_task = None
        self._shutdown = False
    
    async def start_monitoring(self):
        """Start health monitoring."""
        if self._monitor_task is None:
            self._monitor_task = asyncio.create_task(self._monitor_loop())
            self.logger.info("Redis health monitoring started")
    
    async def stop_monitoring(self):
        """Stop health monitoring."""
        self._shutdown = True
        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
            self._monitor_task = None
            self.logger.info("Redis health monitoring stopped")
    
    async def _monitor_loop(self):
        """Health monitoring loop."""
        while not self._shutdown:
            try:
                await self.check_health()
                await asyncio.sleep(self.check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"Health monitor error: {e}")
                await asyncio.sleep(self.check_interval)
    
    async def check_health(self) -> bool:
        """Perform health check."""
        try:
            self.check_count += 1
            start_time = time.time()
            
            # Simple ping test
            await self.redis_client.ping()
            
            response_time = time.time() - start_time
            self.last_check = time.time()
            
            if not self.is_healthy:
                self.logger.info("Redis connection restored")
                self.is_healthy = True
            
            self.logger.debug(f"Redis health check passed in {response_time:.3f}s")
            return True
            
        except Exception as e:
            self.failure_count += 1
            self.is_healthy = False
            self.logger.error(f"Redis health check failed: {e}")
            return False
    
    def get_health_stats(self) -> Dict[str, Any]:
        """Get health monitoring statistics."""
        return {
            'is_healthy': self.is_healthy,
            'last_check': self.last_check,
            'check_count': self.check_count,
            'failure_count': self.failure_count,
            'failure_rate': self.failure_count / max(self.check_count, 1),
            'uptime_percentage': (self.check_count - self.failure_count) / max(self.check_count, 1) * 100
        }


class RedisClient:
    """Enterprise Redis client with advanced features."""
    
    def __init__(self, config: RedisConfig = None):
        """Initialize Redis client.
        
        Args:
            config: Redis configuration
        """
        self.config = config or get_redis_config()
        self.redis: Optional[Union[redis.Redis, RedisCluster]] = None
        self.pool = None
        self.circuit_breaker = CircuitBreaker()
        self.health_monitor = None
        self.connection_id = str(uuid.uuid4())
        self.logger = logging.getLogger(__name__)
        self._connection_lock = asyncio.Lock()
        self._connected = False
        self._reconnect_attempts = 0
        self._max_reconnect_attempts = 10
    
    async def connect(self) -> None:
        """Establish Redis connection."""
        async with self._connection_lock:
            if self._connected:
                return
            
            try:
                self.logger.info(f"Connecting to Redis ({self.config.mode.value}) at {self.config.connection_config.host}:{self.config.connection_config.port}")
                
                if self.config.mode == RedisMode.CLUSTER:
                    await self._connect_cluster()
                elif self.config.mode == RedisMode.SENTINEL:
                    await self._connect_sentinel()
                else:
                    await self._connect_standalone()
                
                # Test connection
                await self.redis.ping()
                
                # Start health monitoring
                self.health_monitor = RedisHealthMonitor(self.redis, self.config.connection_config.health_check_interval)
                await self.health_monitor.start_monitoring()
                
                self._connected = True
                self._reconnect_attempts = 0
                self.logger.info(f"Redis connection established (ID: {self.connection_id})")
                
            except Exception as e:
                self.logger.error(f"Failed to connect to Redis: {e}")
                await self._handle_connection_failure()
                raise RedisConnectionError(f"Failed to connect to Redis: {e}")
    
    async def _connect_standalone(self):
        """Connect to standalone Redis instance."""
        # Get connection kwargs without max_connections for the pool
        connection_kwargs = self.config.get_connection_kwargs()
        # Add max_connections for the pool
        pool_kwargs = connection_kwargs.copy()
        pool_kwargs['max_connections'] = self.config.connection_config.max_connections
        
        self.pool = redis.ConnectionPool(**pool_kwargs)
        self.redis = redis.Redis(connection_pool=self.pool)
    
    async def _connect_cluster(self):
        """Connect to Redis cluster."""
        cluster_kwargs = self.config.get_cluster_kwargs()
        self.redis = RedisCluster(**cluster_kwargs)
    
    async def _connect_sentinel(self):
        """Connect to Redis via Sentinel."""
        sentinel_kwargs = self.config.get_sentinel_kwargs()
        sentinel = Sentinel(sentinel_kwargs['sentinels'], **sentinel_kwargs.get('sentinel_kwargs', {}))
        self.redis = sentinel.master_for(sentinel_kwargs['service_name'])
    
    async def disconnect(self) -> None:
        """Close Redis connection."""
        async with self._connection_lock:
            if not self._connected:
                return
            
            try:
                # Stop health monitoring
                if self.health_monitor:
                    await self.health_monitor.stop_monitoring()
                    self.health_monitor = None
                
                # Close Redis connection
                if self.redis:
                    await self.redis.close()
                    self.redis = None
                
                # Close connection pool
                if self.pool:
                    await self.pool.disconnect()
                    self.pool = None
                
                self._connected = False
                self.logger.info(f"Redis connection closed (ID: {self.connection_id})")
                
            except Exception as e:
                self.logger.error(f"Error closing Redis connection: {e}")
    
    async def _handle_connection_failure(self):
        """Handle connection failure with exponential backoff."""
        self._reconnect_attempts += 1
        if self._reconnect_attempts <= self._max_reconnect_attempts:
            backoff_time = min(2 ** self._reconnect_attempts, 60)
            self.logger.warning(f"Redis connection failed, retrying in {backoff_time}s (attempt {self._reconnect_attempts}/{self._max_reconnect_attempts})")
            await asyncio.sleep(backoff_time)
        else:
            self.logger.error("Max reconnection attempts reached")
    
    async def ensure_connected(self):
        """Ensure Redis connection is established."""
        if not self._connected or not self.redis:
            await self.connect()
        
        # Check if connection is still alive
        try:
            await self.redis.ping()
        except (ConnectionError, TimeoutError):
            self.logger.warning("Redis connection lost, reconnecting...")
            self._connected = False
            await self.connect()
    
    @asynccontextmanager
    async def get_connection(self):
        """Get Redis connection with automatic management."""
        await self.ensure_connected()
        try:
            yield self.redis
        except (ConnectionError, TimeoutError) as e:
            self.logger.error(f"Redis operation failed: {e}")
            self._connected = False
            raise RedisConnectionError(f"Redis operation failed: {e}")
    
    async def execute_with_retry(self, operation: Callable, *args, max_retries: int = 3, **kwargs):
        """Execute Redis operation with retry logic."""
        for attempt in range(max_retries + 1):
            try:
                async with self.get_connection() as conn:
                    return await self.circuit_breaker.call(operation, conn, *args, **kwargs)
            except (RedisCircuitBreakerError, RedisConnectionError):
                if attempt == max_retries:
                    raise
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
            except Exception as e:
                if attempt == max_retries:
                    self.logger.error(f"Redis operation failed after {max_retries} retries: {e}")
                    raise
                await asyncio.sleep(2 ** attempt)
    
    # Basic Redis operations with error handling
    async def get(self, key: str) -> Optional[str]:
        """Get value by key."""
        return await self.execute_with_retry(lambda conn, k: conn.get(k), key)
    
    async def set(self, key: str, value: Any, ex: Optional[int] = None, nx: bool = False) -> bool:
        """Set key-value pair."""
        return await self.execute_with_retry(lambda conn, k, v, **kwargs: conn.set(k, v, **kwargs), key, value, ex=ex, nx=nx)
    
    async def delete(self, *keys: str) -> int:
        """Delete keys."""
        return await self.execute_with_retry(lambda conn, *k: conn.delete(*k), *keys)
    
    async def exists(self, *keys: str) -> int:
        """Check if keys exist."""
        return await self.execute_with_retry(lambda conn, *k: conn.exists(*k), *keys)
    
    async def expire(self, key: str, time: int) -> bool:
        """Set key expiration."""
        return await self.execute_with_retry(lambda conn, k, t: conn.expire(k, t), key, time)
    
    async def ttl(self, key: str) -> int:
        """Get key time to live."""
        return await self.execute_with_retry(lambda conn, k: conn.ttl(k), key)
    
    # Hash operations
    async def hget(self, name: str, key: str) -> Optional[str]:
        """Get hash field value."""
        return await self.execute_with_retry(lambda conn, n, k: conn.hget(n, k), name, key)
    
    async def hset(self, name: str, key: str = None, value: Any = None, mapping: Dict[str, Any] = None) -> int:
        """Set hash field value."""
        return await self.execute_with_retry(lambda conn, n, **kwargs: conn.hset(n, **kwargs), name, key=key, value=value, mapping=mapping)
    
    async def hgetall(self, name: str) -> Dict[str, str]:
        """Get all hash fields."""
        return await self.execute_with_retry(lambda conn, n: conn.hgetall(n), name)
    
    async def hdel(self, name: str, *keys: str) -> int:
        """Delete hash fields."""
        return await self.execute_with_retry(lambda conn, n, *k: conn.hdel(n, *k), name, *keys)
    
    # List operations
    async def lpush(self, name: str, *values: Any) -> int:
        """Push values to list head."""
        return await self.execute_with_retry(lambda conn, n, *v: conn.lpush(n, *v), name, *values)
    
    async def rpush(self, name: str, *values: Any) -> int:
        """Push values to list tail."""
        return await self.execute_with_retry(lambda conn, n, *v: conn.rpush(n, *v), name, *values)
    
    async def lpop(self, name: str, count: int = None) -> Union[str, List[str], None]:
        """Pop value from list head."""
        return await self.execute_with_retry(lambda conn, n, c: conn.lpop(n, c), name, count)
    
    async def rpop(self, name: str, count: int = None) -> Union[str, List[str], None]:
        """Pop value from list tail."""
        return await self.execute_with_retry(lambda conn, n, c: conn.rpop(n, c), name, count)
    
    async def llen(self, name: str) -> int:
        """Get list length."""
        return await self.execute_with_retry(lambda conn, n: conn.llen(n), name)
    
    async def lrange(self, name: str, start: int, end: int) -> List[str]:
        """Get list range."""
        return await self.execute_with_retry(lambda conn, n, s, e: conn.lrange(n, s, e), name, start, end)
    
    # Set operations
    async def sadd(self, name: str, *values: Any) -> int:
        """Add members to set."""
        return await self.execute_with_retry(lambda conn, n, *v: conn.sadd(n, *v), name, *values)
    
    async def srem(self, name: str, *values: Any) -> int:
        """Remove members from set."""
        return await self.execute_with_retry(lambda conn, n, *v: conn.srem(n, *v), name, *values)
    
    async def smembers(self, name: str) -> set:
        """Get all set members."""
        return await self.execute_with_retry(lambda conn, n: conn.smembers(n), name)
    
    async def scard(self, name: str) -> int:
        """Get set cardinality."""
        return await self.execute_with_retry(lambda conn, n: conn.scard(n), name)
    
    async def sismember(self, name: str, value: Any) -> bool:
        """Check if value is member of set."""
        return await self.execute_with_retry(lambda conn, n, v: conn.sismember(n, v), name, value)
    
    # Sorted set operations
    async def zadd(self, name: str, mapping: Dict[Any, float], nx: bool = False, xx: bool = False) -> int:
        """Add members to sorted set."""
        return await self.execute_with_retry(lambda conn, n, m, **kwargs: conn.zadd(n, m, **kwargs), name, mapping, nx=nx, xx=xx)
    
    async def zrem(self, name: str, *values: Any) -> int:
        """Remove members from sorted set."""
        return await self.execute_with_retry(lambda conn, n, *v: conn.zrem(n, *v), name, *values)
    
    async def zrange(self, name: str, start: int, end: int, withscores: bool = False) -> List:
        """Get sorted set range."""
        return await self.execute_with_retry(lambda conn, n, s, e, w: conn.zrange(n, s, e, withscores=w), name, start, end, withscores)
    
    async def zcard(self, name: str) -> int:
        """Get sorted set cardinality."""
        return await self.execute_with_retry(lambda conn, n: conn.zcard(n), name)
    
    async def zrangebyscore(self, name: str, min: Union[int, float, str], max: Union[int, float, str], 
                           start: int = None, num: int = None, withscores: bool = False) -> List:
        """Get sorted set range by score."""
        return await self.execute_with_retry(
            lambda conn, n, mn, mx, s, nm, w: conn.zrangebyscore(n, mn, mx, start=s, num=nm, withscores=w),
            name, min, max, start, num, withscores
        )
    
    async def zremrangebyrank(self, name: str, min: int, max: int) -> int:
        """Remove members from sorted set by rank range."""
        return await self.execute_with_retry(lambda conn, n, mn, mx: conn.zremrangebyrank(n, mn, mx), name, min, max)
    
    # Pipeline operations
    @asynccontextmanager
    async def pipeline(self):
        """Create Redis pipeline as async context manager."""
        await self.ensure_connected()
        pipe = self.redis.pipeline()
        try:
            yield pipe
        finally:
            # Pipeline cleanup is handled by the pipeline itself
            pass
    
    # Pub/Sub operations
    async def publish(self, channel: str, message: Any) -> int:
        """Publish message to channel."""
        return await self.execute_with_retry(lambda conn, c, m: conn.publish(c, m), channel, message)
    
    async def pubsub(self):
        """Create pub/sub instance."""
        await self.ensure_connected()
        return self.redis.pubsub()
    
    # Stream operations (Redis 5.0+)
    async def xadd(self, name: str, fields: Dict[str, Any], id: str = '*', maxlen: int = None) -> str:
        """Add entry to stream."""
        return await self.execute_with_retry(lambda conn, n, f, **kwargs: conn.xadd(n, f, **kwargs), name, fields, id=id, maxlen=maxlen)
    
    async def xreadgroup(self, group: str, consumer: str, streams: Dict[str, str], count: int = None, block: int = None) -> List:
        """Read from stream consumer group."""
        return await self.execute_with_retry(lambda conn, g, c, s, **kwargs: conn.xreadgroup(g, c, s, **kwargs), group, consumer, streams, count=count, block=block)
    
    async def xack(self, name: str, group: str, *ids: str) -> int:
        """Acknowledge messages in a consumer group."""
        return await self.execute_with_retry(lambda conn, n, g, *i: conn.xack(n, g, *i), name, group, *ids)
    
    async def xpending_range(self, name: str, group: str, start: str = '-', end: str = '+', 
                           count: int = None, consumer: str = None) -> List[Dict[str, Any]]:
        """Get detailed information about pending messages."""
        # Convert response to list of dicts for consistency
        async def _xpending_range(conn, n, g, s, e, c, cons):
            if cons:
                result = await conn.xpending_range(n, g, min=s, max=e, count=c, consumername=cons)
            else:
                result = await conn.xpending_range(n, g, min=s, max=e, count=c)
            # Convert to consistent format
            pending_list = []
            for item in result:
                pending_list.append({
                    'message_id': item['message_id'],
                    'consumer': item['consumer'],
                    'time_since_delivered': item['time_since_delivered'],
                    'times_delivered': item['times_delivered']
                })
            return pending_list
        
        return await self.execute_with_retry(
            _xpending_range, name, group, start, end, count or 10, consumer
        )
    
    async def xclaim(self, name: str, group: str, consumer: str, min_idle_time: int, 
                    ids: List[str], **kwargs) -> List[Tuple[bytes, Dict[bytes, bytes]]]:
        """Claim ownership of pending messages."""
        return await self.execute_with_retry(
            lambda conn, n, g, c, m, i, **kw: conn.xclaim(n, g, c, m, i, **kw),
            name, group, consumer, min_idle_time, ids, **kwargs
        )
    
    async def xgroup_create(self, name: str, group: str, id: str = '0', mkstream: bool = False) -> bool:
        """Create consumer group."""
        try:
            async with self.get_connection() as conn:
                return await self.circuit_breaker.call(
                    lambda c, n, g, i, m: c.xgroup_create(n, g, i, mkstream=m),
                    conn, name, group, id, mkstream
                )
        except Exception as e:
            # BUSYGROUP error is expected if group already exists
            if "BUSYGROUP" in str(e):
                self.logger.debug(f"Consumer group {group} already exists for stream {name}")
                return False
            raise
    
    # Lua script operations
    async def eval(self, script: str, numkeys: int, *keys_and_args) -> Any:
        """Execute Lua script."""
        return await self.execute_with_retry(lambda conn, s, n, *ka: conn.eval(s, n, *ka), script, numkeys, *keys_and_args)
    
    async def evalsha(self, sha: str, numkeys: int, *keys_and_args) -> Any:
        """Execute Lua script by SHA."""
        return await self.execute_with_retry(lambda conn, s, n, *ka: conn.evalsha(s, n, *ka), sha, numkeys, *keys_and_args)
    
    async def script_load(self, script: str) -> str:
        """Load Lua script and return SHA."""
        return await self.execute_with_retry(lambda conn, s: conn.script_load(s), script)
    
    async def scan(self, cursor: int = 0, match: str = None, count: int = None) -> tuple:
        """Scan keys."""
        return await self.execute_with_retry(lambda conn, c, m, ct: conn.scan(c, match=m, count=ct), cursor, match, count)
    
    async def script_flush(self) -> bool:
        """Flush all Lua scripts."""
        return await self.execute_with_retry(lambda conn: conn.script_flush())
    
    async def zremrangebyscore(self, name: str, min_score: Union[int, float], max_score: Union[int, float]) -> int:
        """Remove members from sorted set by score range."""
        return await self.execute_with_retry(lambda conn, n, min_s, max_s: conn.zremrangebyscore(n, min_s, max_s), name, min_score, max_score)
    
    async def ltrim(self, name: str, start: int, end: int) -> bool:
        """Trim list to specified range."""
        return await self.execute_with_retry(lambda conn, n, s, e: conn.ltrim(n, s, e), name, start, end)
    
    # Info and monitoring
    async def info(self, section: str = None) -> Dict[str, Any]:
        """Get Redis server info."""
        return await self.execute_with_retry(lambda conn, s: conn.info(s), section)
    
    async def ping(self) -> bool:
        """Ping Redis server."""
        return await self.execute_with_retry(lambda conn: conn.ping())
    
    async def get_memory_usage(self, key: str) -> int:
        """Get memory usage of key."""
        return await self.execute_with_retry(lambda conn, k: conn.memory_usage(k), key)
    
    async def xinfo_stream(self, name: str) -> Dict[str, Any]:
        """Get information about a stream."""
        return await self.execute_with_retry(lambda conn, n: conn.xinfo_stream(n), name)
    
    async def xrevrange(self, name: str, max: str = '+', min: str = '-', count: int = None) -> List:
        """Read stream entries in reverse order."""
        return await self.execute_with_retry(lambda conn, n, mx, mn, c: conn.xrevrange(n, mx, mn, count=c), name, max, min, count)
    
    async def xtrim(self, name: str, maxlen: int = None, minid: str = None, approximate: bool = True) -> int:
        """Trim stream to a maximum length or minimum ID."""
        if maxlen is not None:
            return await self.execute_with_retry(
                lambda conn, n, ml, a: conn.xtrim(n, maxlen=ml, approximate=a), 
                name, maxlen, approximate
            )
        elif minid is not None:
            return await self.execute_with_retry(
                lambda conn, n, mi: conn.xtrim(n, minid=mi), 
                name, minid
            )
        else:
            raise ValueError("Either maxlen or minid must be specified")
    
    async def xpending(self, name: str, group: str, start: str = None, end: str = None, count: int = None, consumer: str = None) -> Any:
        """Get information about pending messages in a consumer group."""
        # If no range specified, get summary
        if start is None and end is None and count is None:
            return await self.execute_with_retry(lambda conn, n, g: conn.xpending(n, g), name, group)
        
        # Get detailed pending messages
        if consumer:
            return await self.execute_with_retry(
                lambda conn, n, g, s, e, c, cons: conn.xpending_range(n, g, s, e, c, consumername=cons), 
                name, group, start or '-', end or '+', count or 10, consumer
            )
        else:
            return await self.execute_with_retry(
                lambda conn, n, g, s, e, c: conn.xpending_range(n, g, s, e, c), 
                name, group, start or '-', end or '+', count or 10
            )
    
    # Statistics and monitoring
    def get_connection_stats(self) -> Dict[str, Any]:
        """Get connection statistics."""
        health_stats = self.health_monitor.get_health_stats() if self.health_monitor else {}
        
        return {
            'connection_id': self.connection_id,
            'connected': self._connected,
            'reconnect_attempts': self._reconnect_attempts,
            'config': {
                'mode': self.config.mode.value,
                'environment': self.config.environment.value,
                'host': self.config.connection_config.host,
                'port': self.config.connection_config.port,
                'max_connections': self.config.connection_config.max_connections
            },
            'health': health_stats,
            'circuit_breaker': {
                'state': self.circuit_breaker.state,
                'failure_count': self.circuit_breaker.failure_count,
                'last_failure_time': self.circuit_breaker.last_failure_time
            }
        }
    
    async def __aenter__(self):
        """Async context manager entry."""
        await self.connect()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit."""
        await self.disconnect()


# Global Redis client instance
_redis_client = None


async def get_redis_client(config: RedisConfig = None) -> RedisClient:
    """Get global Redis client instance."""
    global _redis_client
    if _redis_client is None:
        _redis_client = RedisClient(config)
        await _redis_client.connect()
    return _redis_client


async def close_redis_client():
    """Close global Redis client instance."""
    global _redis_client
    if _redis_client:
        await _redis_client.disconnect()
        _redis_client = None